local encoding = require 'encoding'
encoding.default = 'cp1251' -- set the same encoding as script file
u8 = encoding.UTF8 -- get the UTF-8 converter
local inicfg = require 'inicfg'

if not doesFileExist('moonloader\\config\\company\\settings.ini') then
	if not doesDirectoryExist('moonloader\\config\\company') then createDirectory('moonloader\\config\\company') end
	local mainIni =
		{
			product =

			{
				hoz1=false,
				c1=false,
				hoz5=false,
				hoz4=false,
				hoz9=false,
				hoz8=false,
				hoz2=false,
				hoz6=false,
				or1=false,
				hoz3=false,
				or2=false,
				hoz7=false,
				f1=false,
				f2=false,
				c2=false
			},
			value =

			{
				extra_warehouse1=0,
				extra_warehouse2=0,
				skip_ex2=false,
				min_delivery_quantity=1000,
				buy_quantity=100000,
				buy_city=2,
				min_price=5.5,
				buy_pay_value=0.3,
			},
			LV =
			{
				alv=1.3,
				blv=1.3,
				family=1.3,
				mine=1.3,
				sv=1.3,
				alcatraz=1.3,
				lvpd=1.3,
				vvs=1.3,
				elqh = 1.3,
				eim = 1.3,
				stolv = 1.3,
				ph=1.3,
				bcb=1.3,
				bco=1.3
			},
			SF =
			{
				railway=1.3,
				bayside=1.3,
				sfpd=1.3,
				vmf=1.3,
				asf=1.3,
				bsf=1.3,
				stosf=1.3,
				wood=1.3
			},
			LS =
			{
				bc=1.3,
				bls=1.3,
				bsm = 1.3,
				chls = 1.3,
				jh = 1.3,
				stols=1.3,
				lspd=1.3,
				als=1.3,
				bcha=1.3,
				zs=1.3
			}

		}
	inicfg.save(mainIni, 'company\\settings')
end

local directIni = 'moonloader\\config\\company\\settings.ini'
local mainIni = inicfg.load(nil, directIni)

local destination_price = {}
destination_price["База ВВС"] = mainIni.LV.vvs
destination_price["База СВ"] = mainIni.LV.sv
destination_price["Family Center"] = mainIni.LV.family
destination_price["Больница Las Venturas"] = mainIni.LV.blv
destination_price["Аэропорт Las Venturas"] = mainIni.LV.alv
destination_price["Police Department LV"] = mainIni.LV.lvpd
destination_price["Alcatraz"] = mainIni.LV.alcatraz
destination_price["Business Center"] = mainIni.LS.bc
destination_price["Больница Los Santos"] = mainIni.LS.bls
destination_price["Порт Bayside"] = mainIni.SF.bayside
destination_price["Аэропорт San Fierro"] = mainIni.SF.asf
destination_price["База ВМФ"] = mainIni.SF.vmf
destination_price["Police Department SF"] = mainIni.SF.sfpd
destination_price["Шахта"] = mainIni.LV.mine
destination_price["Железнодорожный завод"] = mainIni.SF.railway
destination_price["El Quebrados Hotel"] = mainIni.LV.elqh
destination_price["Beach Side Hotel"] = mainIni.LS.bsm
destination_price["Central Hotel LS"] = mainIni.LS.chls
destination_price["Emerald Isle Motel"] = mainIni.LV.eim
destination_price["Jefferson hotel"] = mainIni.LS.jh
destination_price["Больница San Fierro"] = mainIni.SF.bsf
destination_price["СТО San Fierro"] = mainIni.SF.stosf
destination_price["СТО Los Santos"] = mainIni.LS.stols
destination_price["СТО Las Venturas"] = mainIni.LV.stolv
destination_price["Pirates Hotel"] = mainIni.LV.ph
destination_price["Police Department LS"] = mainIni.LS.lspd
destination_price["Аэропорт Los Santos"] = mainIni.LS.als
destination_price["Байкерский клуб Bandidos"] = mainIni.LV.bcb
destination_price["Байкерский клуб Outlaws"] = mainIni.LV.bco
destination_price["Байкерский клуб Hells Angels"] = mainIni.LS.bcha
destination_price["Деревообрабатывающий завод"] = mainIni.SF.wood
destination_price["Здание суда"] = mainIni.LS.zs

local is_product_active = {}
is_product_active['Парашютное снаряжение'] = mainIni.product.hoz1
is_product_active["Товары общего пользования"] = mainIni.product.hoz2
is_product_active["Спорт-Товары"] = mainIni.product.hoz3
is_product_active["Одежда"] = mainIni.product.hoz4
is_product_active["Канцелярские товары"] = mainIni.product.hoz5
is_product_active["Аксессуары"] = mainIni.product.hoz6
is_product_active["Радиоигрушки"] = mainIni.product.hoz7
is_product_active["Мебель"] = mainIni.product.hoz8
is_product_active["Косметические средства"] = mainIni.product.hoz9
is_product_active["Оружие"] = mainIni.product.or1
is_product_active["Пиротехника"] = mainIni.product.or2
is_product_active["Продукты питания"] = mainIni.product.f1
is_product_active["Алкоголь"] = mainIni.product.f2
is_product_active["Транспорт"] = mainIni.product.c1
is_product_active["Автозапчасти"] = mainIni.product.c2

local color = {}
color['Парашютное снаряжение'] = '808000'
color['Спорт-Товары'] = '4682B4'
color['Одежда'] = 'FF8C00'
color['Аксессуары'] = 'DEB887'
color['Радиоигрушки'] = 'FF0000'
color['Косметические средства'] = 'FFC0CB'
color['Мебель'] = '8B4513'
color["Канцелярские товары"] = 'B0E0E6'
color["Товары общего пользования"] = '778899'
color["Оружие"] = '2F4F4F'
color["Пиротехника"] = '8B0000'
color["Продукты питания"] = 'FFFF00'
color["Алкоголь"] = '800080'
color["Транспорт"] = '000080'
color["Автозапчасти"] = 'BC8F8F'

local city_array = {"Los Santos", "San Fierro", "Las Venturas"}
local imgui = require 'imgui'
local main_window_state = imgui.ImBool(false)
local condition_window_state = imgui.ImBool(false)
local hoz1 = imgui.ImBool(mainIni.product.hoz1)
local hoz2 = imgui.ImBool(mainIni.product.hoz2)
local hoz3 = imgui.ImBool(mainIni.product.hoz3)
local hoz4 = imgui.ImBool(mainIni.product.hoz4)
local hoz5 = imgui.ImBool(mainIni.product.hoz5)
local hoz6 = imgui.ImBool(mainIni.product.hoz6)
local hoz7 = imgui.ImBool(mainIni.product.hoz7)
local hoz8 = imgui.ImBool(mainIni.product.hoz8)
local hoz9 = imgui.ImBool(mainIni.product.hoz9)

local or1 = imgui.ImBool(mainIni.product.or1)
local or2 = imgui.ImBool(mainIni.product.or2)

local f1 = imgui.ImBool(mainIni.product.f1)
local f2 = imgui.ImBool(mainIni.product.f2)

local c1 = imgui.ImBool(mainIni.product.c1)
local c2 = imgui.ImBool(mainIni.product.c2)

local buy_city = imgui.ImInt(mainIni.value.buy_city)
local buy_pay_value = imgui.ImFloat(mainIni.value.buy_pay_value)
local buy_quantity = imgui.ImInt(mainIni.value.buy_quantity)
local min_price = imgui.ImFloat(mainIni.value.min_price)
local min_delivery_quantity = imgui.ImInt(mainIni.value.min_delivery_quantity)
local skip_ex2 = imgui.ImBool(mainIni.value.skip_ex2)
local extra_warehouse1 = imgui.ImInt(mainIni.value.extra_warehouse1)
local extra_warehouse2 = imgui.ImInt(mainIni.value.extra_warehouse2)

local alv = imgui.ImFloat(mainIni.LV.alv)
local vvs = imgui.ImFloat(mainIni.LV.vvs)
local sv = imgui.ImFloat(mainIni.LV.sv)
local family = imgui.ImFloat(mainIni.LV.family)
local blv = imgui.ImFloat(mainIni.LV.blv)
local lvpd = imgui.ImFloat(mainIni.LV.lvpd)
local alcatraz = imgui.ImFloat(mainIni.LV.alcatraz)
local mine = imgui.ImFloat(mainIni.LV.mine)
local bayside = imgui.ImFloat(mainIni.SF.bayside)
local asf = imgui.ImFloat(mainIni.SF.asf)
local vmf = imgui.ImFloat(mainIni.SF.vmf)
local sfpd = imgui.ImFloat(mainIni.SF.sfpd)
local railway = imgui.ImFloat(mainIni.SF.railway)
local bc = imgui.ImFloat(mainIni.LS.bc)
local bls = imgui.ImFloat(mainIni.LS.bls)
local elqh = imgui.ImFloat(mainIni.LV.elqh)
local bsm = imgui.ImFloat(mainIni.LS.bsm)
local chls = imgui.ImFloat(mainIni.LS.chls)
local eim = imgui.ImFloat(mainIni.LV.eim)
local jh = imgui.ImFloat(mainIni.LS.jh)
local bsf = imgui.ImFloat(mainIni.SF.bsf)
local stosf = imgui.ImFloat(mainIni.SF.stosf)
local stols = imgui.ImFloat(mainIni.LS.stols)
local stolv = imgui.ImFloat(mainIni.LV.stolv)
local ph = imgui.ImFloat(mainIni.LV.ph)
local lspd = imgui.ImFloat(mainIni.LS.lspd)
local als = imgui.ImFloat(mainIni.LS.als)
local bcb = imgui.ImFloat(mainIni.LV.bcb)
local bco = imgui.ImFloat(mainIni.LV.bco)
local bcha = imgui.ImFloat(mainIni.LS.bcha)
local wood = imgui.ImFloat(mainIni.SF.wood)
local zs = imgui.ImFloat(mainIni.LS.zs)

local sw, sh = getScreenResolution()

require "lib.moonloader"
local sampev = require 'lib.samp.events'

local title_company = '{FFDF80}Компания'
local title_parking = '{FFFFAD}Компании'
local title_company_2 = "{FFFFAD}Состав компании"
local id_company
local id_company_2
local id_company_2_1
local id_company_2_1_2
local id_company_2_1_2_2

local id_exchange1
local id_exchange1_1
local id_exchange1_1_1

local id_exchange2
local id_exchange2_1
local id_exchange2_1_1

local id_buy = id_company
local id_buy_1 = id_company
local id_buy_1_1 = id_company
local id_buy_1_1_1 = id_company

local id_parking
local id_parking_1
local id_parking_1_2
local id_parking_1_2_1

local number_of_warehouses
local is_active = false
local warehouse = {}
local condition_warehouse = {}
local capacity_warehouse = {}
local product = { {}, {} }
local condition_product_list = {}
local condition_product = { {}, {} }
local allow = 0
local big_delay = 500
local small_delay = 200
local status = false
local buy_product = {}
local condition_buy_product = {}
local is_taken= false
local is_aafk = false
local memory = require "memory"
local current_car
local spawn_process = false
local aafk_button = 'Включить anti-afk'
local button_on = 'Запустить'
local steal = false
local first_check = true
local spawn_allow = true
local column_2 = 270
local column_3 = 500
local column_4 = 700
local size_main_x = 920
local size_main_y = 610
local size_condition_x=250
local size_condition_y=500
local lines_condition = 0
local current_warehouse
local delivery_product = { {}, {} }
local delivery_done = { {}, {} }
local delivery_total = { {}, {} }
local delivery_process = { {}, {} }
local condition_product_total = { {}, {} }
local delivery_wait = {}

update_state = false
local script_vers = 1.01
local script_vers_text = '1.01'

local update_url = "https://raw.githubusercontent.com/Maxwellaf/samp/master/update.ini"
local update_path = getWorkingDirectory().."\\config\\company\\update.ini"

local script_url = ""
local script_path = thisScript().path
local dlstatus = require('moonloader').download_status

function main()
	if not isSampLoaded() or not isSampfuncsLoaded() then return end
	while not isSampAvailable() do wait(100) end

	sampRegisterChatCommand('cool', cmd_window)
	sampRegisterChatCommand('coolon', cmd_on)

	downloadUrlToFile(update_url, update_path, function(id, status)
		if status == dlstatus.STATUS_ENDDOWNLOADDATA then
			updateIni = inicfg.load(nil, update_path)
			if tonumber(updateIni.info.vers) > script_vers then
				sampAddChatMessage('Есть обновление. Версия: '..updateIni.info.vers_text, -1)
				update_state = true
			else
				sampAddChatMessage('Обновления нет.', -1)
			end
			os.remove(update_path)
		end
	end)

	while true do
		wait(0)
		imgui.Process = main_window_state.v or condition_window_state.v

		if update_state then
			downloadUrlToFile(script_url, script_path, function(id, status)
				if status == dlstatus.STATUS_ENDDOWNLOADDATA then
					sampAddChatMessage('Скрипт успешно обновлен.', color)
					thisScript():reload()
				end
			end)
			break
		end
	end
end

function onWindowMessage(msg, wparam, lparam)
        if(msg == 0x100) then
                if(wparam == VK_ESCAPE and main_window_state.v) then
                        main_window_state.v = false
                        consumeWindowMessage()
                elseif(wparam == VK_RETURN and main_window_state.v) then
                        cmd_on()
                        consumeWindowMessage()
                elseif (wparam == VK_DELETE) then
									main_window_state.v = not main_window_state.v
								end
        end
end

function cmd_window(arg)
	main_window_state.v = not main_window_state.v
end

function spawn_parking()
	if spawn_allow and is_active or not is_active then
		printStyledString("~W~spawning cars", 1000, 4)
		spawn_process = true
		sampSendChat('/parking')
		wait(big_delay)
		sampSendDialogResponse(id_parking, 0)
		current_car = 0
		while spawn_process do
			sampSendChat('/parking')
			sampSendDialogResponse(id_parking, 1, 0)
			sampSendDialogResponse(id_parking_1, 1, 1)
			wait(3*big_delay)
		end
	else
		printStyledString("~W~not allowed", 1000, 4)
	end
end

function save2()
	mainIni.LV.alv = alv.v
	mainIni.LV.vvs = vvs.v
	mainIni.LV.sv = sv.v
	mainIni.LV.family = family.v
	mainIni.LV.blv = blv.v
	mainIni.LV.lvpd = lvpd.v
	mainIni.LV.alcatraz = alcatraz.v
	mainIni.LV.mine = mine.v
	mainIni.SF.bayside = bayside.v
	mainIni.SF.asf = asf.v
	mainIni.SF.vmf = vmf.v
	mainIni.SF.sfpd = sfpd.v
	mainIni.SF.railway = railway.v
	mainIni.LS.bc = bc.v
	mainIni.LS.bls = bls.v
	mainIni.LV.elqh = elqh.v
	mainIni.LS.bsm = bsm.v
	mainIni.LS.chls = chls.v
	mainIni.LV.eim = eim.v
	mainIni.LS.jh = jh.v
	mainIni.SF.bsf = bsf.v
	mainIni.SF.stosf = stosf.v
	mainIni.LS.stols = stols.v
	mainIni.LV.stolv = stolv.v
	mainIni.LV.ph = ph.v
	mainIni.LS.lspd = lspd.v
	mainIni.LS.als = als.v
	mainIni.LV.bcb = bcb.v
	mainIni.LV.bco = bco.v
	mainIni.LS.bcha = bcha.v
	mainIni.SF.wood = wood.v
	mainIni.LS.zs = zs.v
end

function save()
	save2()
	mainIni.product.hoz1 = hoz1.v
	mainIni.product.hoz2 = hoz2.v
	mainIni.product.hoz3 = hoz3.v
	mainIni.product.hoz4 = hoz4.v
	mainIni.product.hoz5 = hoz5.v
	mainIni.product.hoz6 = hoz6.v
	mainIni.product.hoz7 = hoz7.v
	mainIni.product.hoz8 = hoz8.v
	mainIni.product.hoz9 = hoz9.v

	mainIni.product.or1 = or1.v
	mainIni.product.or2 = or2.v

	mainIni.product.f1 = f1.v
	mainIni.product.f2 = f2.v

	mainIni.product.c1 = c1.v
	mainIni.product.c2 = c2.v

	mainIni.value.buy_pay_value = buy_pay_value.v
	mainIni.value.buy_quantity = buy_quantity.v
	mainIni.value.buy_city = buy_city.v
	mainIni.value.min_price = min_price.v
	mainIni.value.min_delivery_quantity = min_delivery_quantity.v
	mainIni.value.skip_ex2 = skip_ex2.v
	mainIni.value.extra_warehouse1 = extra_warehouse1.v
	mainIni.value.extra_warehouse2 = extra_warehouse2.v

	is_product_active['Парашютное снаряжение'] = mainIni.product.hoz1
	is_product_active["Товары общего пользования"] = mainIni.product.hoz2
	is_product_active["Спорт-Товары"] = mainIni.product.hoz3
	is_product_active["Одежда"] = mainIni.product.hoz4
	is_product_active["Канцелярские товары"] = mainIni.product.hoz5
	is_product_active["Аксессуары"] = mainIni.product.hoz6
	is_product_active["Радиоигрушки"] = mainIni.product.hoz7
	is_product_active["Мебель"] = mainIni.product.hoz8
	is_product_active["Косметические средства"] = mainIni.product.hoz9
	is_product_active["Оружие"] = mainIni.product.or1
	is_product_active["Пиротехника"] = mainIni.product.or2
	is_product_active["Продукты питания"] = mainIni.product.f1
	is_product_active["Алкоголь"] = mainIni.product.f2
	is_product_active["Транспорт"] = mainIni.product.c1
	is_product_active["Автозапчасти"] = mainIni.product.c2

	destination_price["База ВВС"] = mainIni.LV.vvs
	destination_price["База СВ"] = mainIni.LV.sv
	destination_price["Family Center"] = mainIni.LV.family
	destination_price["Больница Las Venturas"] = mainIni.LV.blv
	destination_price["Аэропорт Las Venturas"] = mainIni.LV.alv
	destination_price["Police Department LV"] = mainIni.LV.lvpd
	destination_price["Alcatraz"] = mainIni.LV.alcatraz
	destination_price["Business Center"] = mainIni.LS.bc
	destination_price["Больница Los Santos"] = mainIni.LS.bls
	destination_price["Порт Bayside"] = mainIni.SF.bayside
	destination_price["Аэропорт San Fierro"] = mainIni.SF.asf
	destination_price["База ВМФ"] = mainIni.SF.vmf
	destination_price["Police Department SF"] = mainIni.SF.sfpd
	destination_price["Шахта"] = mainIni.LV.mine
	destination_price["Железнодорожный завод"] = mainIni.SF.railway
	destination_price["El Quebrados Hotel"] = mainIni.LV.elqh
	destination_price["Beach Side Hotel"] = mainIni.LS.bsm
	destination_price["Central Hotel LS"] = mainIni.LS.chls
	destination_price["Emerald Isle Motel"] = mainIni.LV.eim
	destination_price["Jefferson hotel"] = mainIni.LS.jh
	destination_price["Больница San Fierro"] = mainIni.SF.bsf
	destination_price["СТО San Fierro"] = mainIni.SF.stosf
	destination_price["СТО Los Santos"] = mainIni.LS.stols
	destination_price["СТО Las Venturas"] = mainIni.LV.stolv
	destination_price["Pirates Hotel"] = mainIni.LV.ph
	destination_price["Police Department LS"] = mainIni.LS.lspd
	destination_price["Аэропорт Los Santos"] = mainIni.LS.als
	destination_price["Байкерский клуб Bandidos"] = mainIni.LV.bcb
	destination_price["Байкерский клуб Outlaws"] = mainIni.LV.bco
	destination_price["Байкерский клуб Hells Angels"] = mainIni.LS.bcha
	destination_price["Деревообрабатывающий завод"] = mainIni.SF.wood
	destination_price["Здание суда"] = mainIni.LS.zs

	inicfg.save(mainIni, 'company\\settings')
end

function imgui.OnDrawFrame2()
	apply_custom_style()
	save()
	imgui.SetNextWindowSize(imgui.ImVec2(size_main_x, size_main_y), imgui.Cond.FirstUseEver)
	imgui.SetNextWindowPos(imgui.ImVec2((sw / 2), sh / 2), imgui.Cond.FirstUseEver, imgui.ImVec2(0.5, 0.5))
	imgui.Begin(u8"cool-manager",main_window_state, imgui.WindowFlags.ShowBorders+imgui.WindowFlags.NoCollapse+imgui.WindowFlags.ShowBorders+imgui.WindowFlags.NoMove+imgui.WindowFlags.NoResize)

	imgui.Checkbox(u8:encode('Парашютное снаряжение'), hoz1)
	imgui.Checkbox(u8:encode('Товары общего пользования'), hoz2)
	imgui.Checkbox(u8:encode('Спорт-Товары'), hoz3)
	imgui.Checkbox(u8:encode('Одежда'), hoz4)
	imgui.Checkbox(u8:encode("Канцелярские товары"), hoz5)
	imgui.Checkbox(u8:encode("Аксессуары"), hoz6)
	imgui.Checkbox(u8:encode("Радиоигрушки"), hoz7)
	imgui.Checkbox(u8:encode("Мебель"), hoz8)
	imgui.Checkbox(u8:encode('Косметические средства'), hoz9)
	imgui.Text("")
	imgui.Checkbox(u8:encode('Оружие'), or1)
	imgui.Checkbox(u8:encode('Пиротехника'), or2)
	imgui.Text("")
	imgui.Checkbox(u8:encode('Продукты питания'), f1)
	imgui.Checkbox(u8:encode('Алкоголь'), f2)
	imgui.Text("")
	imgui.Checkbox(u8:encode('Транспорт'), c1)
	imgui.Checkbox(u8:encode('Автозапчасти'), c2)
	imgui.PushItemWidth(100)
	imgui.SetCursorPosY(472)
	imgui.Combo(u8"Город закупки", buy_city, city_array, #city_array)
	if imgui.SliderFloat(u8'Цена закупки', buy_pay_value, 0.3, 1.5) then
		buy_pay_value.v = round_float(buy_pay_value.v, 0.05)
	end
	if imgui.InputInt(u8'Кол-во единиц закупки', buy_quantity) then
		buy_quantity.v = gates(buy_quantity.v, 1000, 300000)
		if buy_quantity.v % 1000 == 999 then
			buy_quantity.v = math.floor(buy_quantity.v/1000)*1000
		else
			buy_quantity.v = math.ceil(buy_quantity.v/1000)*1000
		end
	end
	if imgui.SliderFloat(u8'Мин. цена за товар', min_price, 3.5, 5.5) then
		min_price.v = round_float(min_price.v, 0.05)
	end
	if imgui.InputInt(u8'Мин. кол-во единиц', min_delivery_quantity) then
		min_delivery_quantity.v = gates(min_delivery_quantity.v, 100, 100000)
		if min_delivery_quantity.v % 100 == 99 then
			min_delivery_quantity.v = math.floor(min_delivery_quantity.v/100)*100
		else
			min_delivery_quantity.v = math.ceil(min_delivery_quantity.v/100)*100
		end
	end
end

function show_condition()
	lines_condition = #warehouse + #product[1] + #product[2] + #delivery_product[1] + #delivery_product[2]
	for j = 1, #warehouse do
		for i = 1, #product[j] do
			if not is_product_active[product[j][i]] then
				lines_condition = lines_condition - 1
			end
		end
	end
	size_condition_y = 28 + lines_condition*18
	if condition_window_state.v then
		imgui.SetNextWindowSize(imgui.ImVec2(size_condition_x, size_condition_y))
		imgui.SetNextWindowPos(imgui.ImVec2((sw - size_condition_x), sh - size_condition_y), imgui.ImVec2(0.5, 0.5))
		imgui.Begin(u8"Состояние складов", condition_window_state, imgui.WindowFlags.ShowBorders+imgui.WindowFlags.NoCollapse+imgui.WindowFlags.ShowBorders+imgui.WindowFlags.NoResize)
		for number = 1, #warehouse do
			if warehouse[number] and condition_warehouse[number] then
				imgui.Text(u8:encode('  '..warehouse[number]..': '..condition_warehouse[number]..'/'..capacity_warehouse[number]..' ('..delivery_wait[number]..')'))
			elseif warehouse[number] then
				imgui.Text(u8:encode('  '..warehouse[number]..': Проверка..'))
			end
			for current = 1, #delivery_product[number] do
				imgui.Text(u8:encode(delivery_done[number][current]..' ('..delivery_process[number][current]..') ['..delivery_product[number][current]..']'))
			end
			for current = 1, #product[number] do
				if is_product_active[product[number][current]] and product[number][current] and condition_product[number][product[number][current]] then
					imgui.Text(u8:encode(product[number][current]..': '..condition_product[number][product[number][current]]))
				end
			end
		end
		imgui.End()
	end
end

function imgui.OnDrawFrame()
	show_condition()
	if not main_window_state.v then
		imgui.ShowCursor = false
		return
	end
	imgui.ShowCursor = true
	imgui.OnDrawFrame2()
	imgui.SetCursorPosY(28)
	imgui.SetCursorPosX(column_2)
	imgui.Text(u8'Las-Venturas')
	imgui.SetCursorPosX(column_2)
	if imgui.SliderFloat(u8'Аэропорт LV', alv, 0.4, 1.3) then
		alv.v = round_float(alv.v, 0.05)
	end
	imgui.SetCursorPosX(column_2)
	if imgui.SliderFloat(u8'ВВС', vvs, 0.4, 1.3) then
		vvs.v = round_float(vvs.v, 0.05)
	end
	imgui.SetCursorPosX(column_2)
	if imgui.SliderFloat(u8'СВ', sv, 0.4, 1.3) then
		sv.v = round_float(sv.v, 0.05)
	end
	imgui.SetCursorPosX(column_2)
	if imgui.SliderFloat(u8'Family Center', family, 0.4, 1.3) then
		family.v = round_float(family.v, 0.05)
	end
	imgui.SetCursorPosX(column_2)
	if imgui.SliderFloat(u8'Больница ЛВ', blv, 0.4, 1.3) then
		blv.v = round_float(blv.v, 0.05)
	end
	imgui.SetCursorPosX(column_2)
	if imgui.SliderFloat(u8'LVPD', lvpd, 0.4, 1.3) then
		lvpd.v = round_float(lvpd.v, 0.05)
	end
	imgui.SetCursorPosX(column_2)
	if imgui.SliderFloat(u8'Alcatraz', alcatraz, 0.4, 1.3) then
		alcatraz.v = round_float(alcatraz.v, 0.05)
	end
	imgui.SetCursorPosX(column_2)
	if imgui.SliderFloat(u8'Шахта', mine, 0.4, 1.3) then
		mine.v = round_float(mine.v, 0.05)
	end
	imgui.SetCursorPosX(column_2)
	if imgui.SliderFloat(u8'СТО Las Venturas', stolv, 0.4, 1.3) then
		stolv.v = round_float(stolv.v, 0.05)
	end
	imgui.SetCursorPosX(column_2)
	if imgui.SliderFloat(u8'Pirates Hotel', ph, 0.4, 1.3) then
		ph.v = round_float(ph.v, 0.05)
	end
	imgui.SetCursorPosX(column_2)
	if imgui.SliderFloat(u8'Emerald Isle Motel', eim, 0.4, 1.3) then
		eim.v = round_float(eim.v, 0.05)
	end
	imgui.SetCursorPosX(column_2)
	if imgui.SliderFloat(u8'El Quebrados Hotel', elqh, 0.4, 1.3) then
		elqh.v = round_float(elqh.v, 0.05)
	end
	imgui.SetCursorPosX(column_2)
	if imgui.SliderFloat(u8'БК Bandidos', bcb, 0.4, 1.3) then
		bcb.v = round_float(bcb.v, 0.05)
	end
	imgui.SetCursorPosX(column_2)
	if imgui.SliderFloat(u8'БК Outlaws', bco, 0.4, 1.3) then
		bcb.v = round_float(bco.v, 0.05)
	end
	imgui.SetCursorPosX(column_3)
	imgui.SetCursorPosY(28)
	imgui.Text(u8'San-Fierro')
	imgui.SetCursorPosX(column_3)
	if imgui.SliderFloat(u8'Bayside', bayside, 0.4, 1.3) then
		bayside.v = round_float(bayside.v, 0.05)
	end
	imgui.SetCursorPosX(column_3)
	if imgui.SliderFloat(u8'Аэропорт SF', asf, 0.4, 1.3) then
		asf.v = round_float(asf.v, 0.05)
	end
	imgui.SetCursorPosX(column_3)
	if imgui.SliderFloat(u8'База ВМФ', vmf, 0.4, 1.3) then
		vmf.v = round_float(vmf.v, 0.05)
	end
	imgui.SetCursorPosX(column_3)
	if imgui.SliderFloat(u8'SFPD', sfpd, 0.4, 1.3) then
		sfpd.v = round_float(sfpd.v, 0.05)
	end
	imgui.SetCursorPosX(column_3)
	if imgui.SliderFloat(u8'ЖД завод', railway, 0.4, 1.3) then
		railway.v = round_float(railway.v, 0.05)
	end
	imgui.SetCursorPosX(column_3)
	if imgui.SliderFloat(u8'Больница SF', bsf, 0.4, 1.3) then
		bsf.v = round_float(bsf.v, 0.05)
	end
	imgui.SetCursorPosX(column_3)
	if imgui.SliderFloat(u8'Дерев. завод', wood, 0.4, 1.3) then
		wood.v = round_float(wood.v, 0.05)
	end
	imgui.SetCursorPosX(column_3)
	if imgui.SliderFloat(u8'СТО San Fierro', stosf, 0.4, 1.3) then
		stosf.v = round_float(stosf.v, 0.05)
	end
	imgui.SetCursorPosX(column_4)
	imgui.SetCursorPosY(28)
	imgui.Text(u8'Los-Santos')
	imgui.SetCursorPosX(column_4)
	if imgui.SliderFloat(u8'Бизнес-Центр', bc, 0.4, 1.3) then
		bc.v = round_float(bc.v, 0.05)
	end
	imgui.SetCursorPosX(column_4)
	if imgui.SliderFloat(u8'Больница ЛС', bls, 0.4, 1.3) then
		bls.v = round_float(bls.v, 0.05)
	end
	imgui.SetCursorPosX(column_4)
	if imgui.SliderFloat(u8'Здание суда', zs, 0.4, 1.3) then
		zs.v = round_float(zs.v, 0.05)
	end
	imgui.SetCursorPosX(column_4)
	if imgui.SliderFloat(u8'LSPD', lspd, 0.4, 1.3) then
		lspd.v = round_float(lspd.v, 0.05)
	end
	imgui.SetCursorPosX(column_4)
	if imgui.SliderFloat(u8'Аэропорт LS', als, 0.4, 1.3) then
		als.v = round_float(als.v, 0.05)
	end
	imgui.SetCursorPosX(column_4)
	if imgui.SliderFloat(u8'СТО Los Santos', stols, 0.4, 1.3) then
		stols.v = round_float(stols.v, 0.05)
	end
	imgui.SetCursorPosX(column_4)
	if imgui.SliderFloat(u8'Jefferson hotel', jh, 0.4, 1.3) then
		jh.v = round_float(jh.v, 0.05)
	end
	imgui.SetCursorPosX(column_4)
	if imgui.SliderFloat(u8'Central Hotel LS', chls, 0.4, 1.3) then
		chls.v = round_float(chls.v, 0.05)
	end
	imgui.SetCursorPosX(column_4)
	if imgui.SliderFloat(u8'Beach Side Hotel', bsm, 0.4, 1.3) then
		bsm.v = round_float(bsm.v, 0.05)
	end
	imgui.SetCursorPosX(column_4)
	if imgui.SliderFloat(u8'БК Hells Angels', bcha, 0.4, 1.3) then
		bcha.v = round_float(bcha.v, 0.05)
	end
	imgui.SetCursorPosX(column_4)
	imgui.SetCursorPosY(470)
	if imgui.Button(u8"Состояние складов", imgui.ImVec2(120, 120)) then
		condition_window_state.v = not condition_window_state.v
	end
	imgui.SetCursorPosX(column_2)
	imgui.SetCursorPosY(498)
	if imgui.InputInt(u8'Дополнительный склад 1', extra_warehouse1) then
		extra_warehouse1.v = gates(extra_warehouse1.v, 0, 62)
	end
	imgui.SetCursorPosX(column_2)
	if imgui.InputInt(u8'Дополнительный склад 2', extra_warehouse2) then
		extra_warehouse2.v = gates(extra_warehouse2.v, 0, 62)
	end
	imgui.SetCursorPosX(column_2)
	imgui.Checkbox(u8"Не брать на доставку", skip_ex2)
	imgui.SetCursorPosX(column_2)
	if imgui.Button(u8"Заспаунить машины") then
		if not spawn_process then
			lua_thread.create(spawn_parking)
		else
			printStyledString("~R~ERROR ~W~already spawning", 2000, 4)
		end
	end
	imgui.SetCursorPosX(column_3)
	imgui.SetCursorPosY(576)
	if imgui.Button(u8:encode(aafk_button), imgui.ImVec2(120, 20)) then
		cmd_aafk()
	end
	imgui.SetCursorPosX(column_4)
	imgui.SetCursorPosY(556)
	if imgui.Button(u8:encode(button_on), imgui.ImVec2(70, 40)) then
		cmd_on()
	end
	imgui.End()
end

function gates(n, a, b)
	if n > b then
		n = b
	elseif n < a then
		n = a
	end
	return n
end

function round_float(arg, n)
	if arg % n > 0 then
		arg =  arg - arg % n
	end
	return arg
end

function cmd_aafk()
	is_aafk = not is_aafk
	if is_aafk then
		aafk_button = 'Выключить anti-afk'
		afk_start()
		printStyledString("~W~anti pause ~G~ON", 1000, 4)
	else
		aafk_button = 'Включить anti-afk'
		afk_stop()
		printStyledString("~W~anti pause ~R~OFF", 1000, 4)
	end
end

function afk_start()
        writeMemory(7634870, 1, 1, 1)
        writeMemory(7635034, 1, 1, 1)
        memory.fill(7623723, 144, 8)
        memory.fill(5499528, 144, 6)
end

function afk_stop()
        writeMemory(7634870, 1, 0, 0)
        writeMemory(7635034, 1, 0, 0)
        memory.hex2bin('5051FF1500838500', 7623723, 8)
        memory.hex2bin('0F847B010000', 5499528, 6)
end

function sampev.onShowDialog(dialogId,s,t,b1,b2,text)
	if not id_parking and t == title_parking then
		id_parking = dialogId
		id_parking_1 = id_parking + 43
		id_parking_1_2 = id_parking + 49
		id_parking_1_2_1 = id_parking + 48
	end

	if not id_company and t == title_company then
		id_company = dialogId
	end

	if not id_company_2 and t == title_company_2 then
		id_company_2 = dialogId
		id_company_2_1 = id_company_2 + 16
		id_company_2_1_2 = id_company_2 + 23
		id_company_2_1_2_2 = id_company_2 + 36

		id_exchange1 = id_company_2 + 26
		id_exchange1_1 = id_company_2 + 27
		id_exchange1_1_1 = id_company_2 + 28

		id_exchange2 = id_company_2 + 29
		id_exchange2_1 = id_company_2 + 30
		id_exchange2_1_1 = id_company_2 + 31

		id_buy = id_company_2 + 35
		id_buy_1 = id_company_2 + 37
		id_buy_1_1 = id_company_2 + 38
		id_buy_1_1_1 = id_company_2 + 39
	end

	if spawn_process then
		if dialogId == id_parking_1_2 then
			number = 0
			for line in text:gmatch("[^\r\n]+") do
				if number > current_car and line:find('Перевозка') and line:find('-') then
					sampSendDialogResponse(id_parking_1_2, 1, number)
					sampSendDialogResponse(id_parking_1_2_1, 1, 0)
					current_car = number
					break
				end
				number = number + 1
			end
			if number > current_car then
				sampSendDialogResponse(id_parking_1_2, 0)
				spawn_process = false
			end
		end
		if dialogId == id_parking or dialogId == id_parking_1 or dialogId == id_parking_1_2 or dialogId == id_parking_1_2_1 then
			return false
		end
	end

	if is_active and allow > 0 then
		allow = allow - 1
		if dialogId == id_company_2 and not number_of_warehouses then
			number = 0
			number_of_warehouses = 0
			for line in text:gmatch("[^\r\n]+") do
				if number == 1 or number == 2 then
					if line:find("Склад") then
						warehouse[number] = string.match(line, '......№%d+')
						number_of_warehouses = number_of_warehouses + 1
					end
				end
				number = number + 1
			end
			if number_of_warehouses == 0 then
				cmd_end()
			end

		elseif dialogId == id_company_2_1_2_2 then
			current = current_warehouse
			number = 0
			for line in text:gmatch("[^\r\n]+") do
				if number == 0 then
					condition_warehouse[current] = tonumber(string.match(line, "(%d*)/"))
					if not capacity_warehouse[current] then
						capacity_warehouse[current] = tonumber(string.match(line, "/(%d*)"))
					end
				else
					product[current][number] = string.match(line, "{FFFFFF}%s(.*)%s%d")
					condition_product[current][product[current][number]] = tonumber(string.match(line, "{FFFFFF}.*%s(%d*)"))
					condition_product_total[current][product[current][number]] = condition_product[current][product[current][number]]
					for i = 1, #delivery_product[current] do
						if delivery_product[current][i] == product[current][number] then
							condition_product_total[current][product[current][number]] = condition_product_total[current][product[current][number]] + delivery_total[current][i] - delivery_done[current][i]
						end
					end
				end
				number = number + 1
			end
			if buy_product[current] and condition_warehouse[current] <= capacity_warehouse[current] - buy_quantity.v then
				if current == 1 then buy_product[2] = nil end
				if current == 2 then buy_product[1] = nil end
				lua_thread.create(function ()
					print(os.date("[%X]")..' {FFFFFF}Закупка: {'..color[buy_product[current]]..'}'..buy_product[current]..'{FFFFFF} на '..warehouse[current])
					number = 0
					condition_warehouse[current] = condition_warehouse[current] + buy_quantity.v
					for line in text:gmatch("[^\r\n]+") do
						if line:find(buy_product[current]) or buy_product[current] == "Спорт-Товары" and number == 3 then
							allow = allow + 4
							sampSendDialogResponse(id_company_2_1_2_2, 1, number)
							sampSendDialogResponse(id_buy, 1, buy_city.v)
							sampSendDialogResponse(id_buy_1, 1, 65535, buy_quantity.v)
							sampSendDialogResponse(id_buy_1_1, 1, 65535, buy_pay_value.v)
							sampSendDialogResponse(id_buy_1_1_1, 1, 65535, 65535)
							break
						end
						number = number + 1
					end
				end)
			else
				sampSendDialogResponse(id_company_2_1_2_2, 0)
			end
		elseif dialogId == id_exchange1 then
			number = 0
			for line in text:gmatch("[^\r\n]+") do
				if (line:find("%{FFDF80%}(%d+)%.%{FFFFFF%}%s+([A-Za-zА-Я а-я]+)%s+([A-Za-zА-Я а-я%-]+)%s+(%d+)%s+-%s+%$(%d+%.%d+)%s+%$(%d+%.%d+)")) then
					b_destination,b_product,b_quantity,b_price,b_delivery_price = line:match("%{FFDF80%}%d+%.%{FFFFFF%}%s+([A-Za-zА-Я а-я]+)%s+([A-Za-zА-Я а-я%-]+)%s+(%d+)%s+-%s+%$(%d+%.%d+)%s+%$(%d+%.%d+)")
					if destination_price[b_destination] and tonumber(b_delivery_price) >= destination_price[b_destination]-0.001 and condition_product_list[b_product] and condition_product_list[b_product] >= tonumber(b_quantity) and min_delivery_quantity.v <= tonumber(b_quantity) and min_price.v <= tonumber(b_price) then
						allow = allow + 2
						condition_product_list[b_product] = condition_product_list[b_product] - b_quantity
						sampSendDialogResponse(id_exchange1, 1, number-1)
						sampSendDialogResponse(id_exchange1_1, 1, 0)
						sampSendDialogResponse(id_exchange1_1_1, 1, 65535, 65535)
						lua_thread.create(function ()
							wait(0)
							is_taken = false
							wait(3*big_delay)
							if not is_taken then
								print(os.date("[%X] {")..color[b_product]..'}'..b_product..'{FFFFFF}: '..b_destination..' '..b_quantity..'{00FFFF}ед. {FFFFFF}'..b_price..'{008000}$ {FFFFFF}'..b_delivery_price.."{008000}$ {FF0000}[failed]")
								allow = allow - 1
								sampSendChat("/exchange1")
							else
								print(os.date("[%X] {")..color[b_product]..'}'..b_product..'{FFFFFF}: '..b_destination..' '..b_quantity..'{00FFFF}ед. {FFFFFF}'..b_price..'{008000}$ {FFFFFF}'..b_delivery_price.."{008000}$ {00FF00}[success]")
							end
						end)
						break
					end
				end
				number = number + 1
			end
			lua_thread.create(function()
				spawn_allow = true
				wait(60000)
				spawn_allow = false
		 	end)
			if allow == 0 then
				allow = allow + 1
				sampSendDialogResponse(dialogId, 0, -1)
				sampSendDialogResponse(id_company, 0, -1)
				lua_thread.create(open_warehouses)
			end
		elseif dialogId == id_exchange2 then
			if not steal then
				number = -1
				for line in text:gmatch("[^\r\n]+") do
					if line:find(warehouse[1]) or line:find(warehouse[2]..' ') then
						sampSendDialogResponse(id_exchange2, 1, number)
						sampSendDialogResponse(id_exchange2_1, 1, 0)
						sampSendDialogResponse(id_exchange2_1_1, 1, 65535, 65535)
						lua_thread.create(function()
							wait(3*big_delay)
							allow = allow + 1
							sampSendChat("/exchange1")
						end)
						break
					end
					number = number + 1
				end
			else
				number = -1
				for line in text:gmatch("[^\r\n]+") do
					if line:find('Склад №'..extra_warehouse1.v..' ') or line:find('Склад №'..extra_warehouse2.v..' ') then
						print(os.date("[%X] {FFFFFF}[EXTRA]:")..line)
						allow = allow + 2
						sampSendDialogResponse(id_exchange2, 1, number)
						sampSendDialogResponse(id_exchange2_1, 1, 0)
						sampSendDialogResponse(id_exchange2_1_1, 1, 65535, 65535)
						steal = false
						break
					end
					number = number + 1
				end
				if steal then
					steal = false
					allow = allow + 1
					sampSendDialogResponse(id_exchange2, 0)
					sampSendDialogResponse(id_company, 0)
				end
			end
		elseif dialogId == id_company_2_1_2 then
			delivery_done[current_warehouse], delivery_process[current_warehouse], delivery_product[current_warehouse], delivery_total[current_warehouse] = {}, {}, {}, {}
			number = 0
			for line in text:gmatch("[^\r\n]+") do
				if number == 0 then
					delivery_wait[current_warehouse] = string.match(line, 'Ожидает доставки:%s%{D7D8FB%}(%d*)')
				end
				if number > 2 then
					delivery_product[current_warehouse][number-2], delivery_done[current_warehouse][number-2], delivery_total[current_warehouse][number-2], delivery_process[current_warehouse][number-2] = string.match(line, '%{FFDF80%}%d+%.%{FFFFFF%}%s+([A-Za-zА-Я а-я]+)%s+(%d*)/(%d*)%s+(%d*)')
				end
				number = number + 1
			end
		end

		return false
	end
end

function sampev.onServerMessage(colorM, msg)
	if is_active then
		if msg:find("{ffffff}Вы должны находиться в офисе своей компании") then
			cmd_on()
			return false
		elseif msg:find("Вы забронировали товар для продажи. Ожидайте принятия службы доставки в течение 30 минут") then
			is_taken = true
			if not skip_ex2.v then
				allow = allow + 3
				lua_thread.create(function ()
					wait(0)
					sampSendChat("/exchange2")
				end)
			else
				lua_thread.create(function ()
					wait(3*big_delay)
					allow = allow + 1
					sampSendChat("/exchange1")
				end)
			end
		elseif msg:find('2 новых заказов на бирже продажи товара. Введите /company для просмотра') and status and not first_check then
			lua_thread.create(function ()
				wait(0)
				allow = allow + 1
				sampSendChat("/exchange1")
			end)
		elseif allow > 0 and msg:find('{ffffff}Нет свободных заказов на доставку товара') then
			allow = allow - 1
			steal = false
		end
	end
end

function open_warehouses()
	if extra_warehouse1.v > 0 or extra_warehouse2.v > 0 then
		wait(3*big_delay)
		steal = true
		allow = allow + 1
		sampSendChat('/exchange2')
	end
	status = false
	wait(3*big_delay)
	condition_warehouse = {}
	open_warehouse(1)
	if number_of_warehouses == 2 then
		wait(big_delay)
		open_warehouse(2)
	end
	make_single_list()
	status = true
end

function make_single_list()
	local extra_value
	buy_product = {}
	condition_buy_product = {}
	if number_of_warehouses == 2 then
		if product[1][1] == product[2][1] then
			for number = 1, #product[1] do
				extra_value = {[1] = 0, [2] = 0}
				for j = 1, 2 do
					for i = 1, #delivery_product[j] do
						if product[j][number] == delivery_product[j][i] then
							extra_value[j] = extra_value[j] + delivery_total[j][i] - delivery_done[j][i]
						end
					end
					condition_product[j][product[j][number]] = condition_product[j][product[j][number]] + extra_value[j]
				end
				if condition_product[1][product[1][number]] > condition_product[2][product[1][number]] then
					condition_product_list[product[1][number]] = condition_product[1][product[1][number]]
				else
					condition_product_list[product[1][number]] = condition_product[2][product[1][number]]
				end
				compare(1, product[1][number])
				for j = 1, 2 do
					condition_product[j][product[j][number]] = condition_product[j][product[j][number]] - extra_value[j]
				end
				if condition_product[1][product[1][number]] > condition_product[2][product[1][number]] then
					condition_product_list[product[1][number]] = condition_product[1][product[1][number]]
				else
					condition_product_list[product[1][number]] = condition_product[2][product[1][number]]
				end
			end
			buy_product[2] = buy_product[1]
			condition_buy_product[2] = condition_buy_product[1]
		else
			for number = 1, #product[1] do

				extra_value = 0
				for i = 1, #delivery_product[1] do
					if product[1][number] == delivery_product[1][i] then
						extra_value = extra_value + delivery_total[1][i] - delivery_done[1][i]
					end
				end
				condition_product_list[product[1][number]] = condition_product[1][product[1][number]] + extra_value
				compare(1, product[1][number])
				condition_product_list[product[1][number]] = condition_product_list[product[1][number]] - extra_value
			end
			for number = 1, #product[2] do
				extra_value = 0
				for i = 1, #delivery_product[2] do
					if product[2][number] == delivery_product[2][i] then
						extra_value = extra_value + delivery_total[2][i] - delivery_done[2][i]
					end
				end
				condition_product_list[product[2][number]] = condition_product[2][product[2][number]] + extra_value
				compare(2, product[2][number])
				condition_product_list[product[2][number]] = condition_product_list[product[2][number]] - extra_value
			end
		end
	elseif number_of_warehouses == 1 then
		for number = 1, #product[1] do
			extra_value = 0
			for i = 1, #delivery_product[1] do
				if product[1][number] == delivery_product[1][i] then
					extra_value = extra_value + delivery_total[1][i] - delivery_done[1][i]
				end
			end
			condition_product_list[product[1][number]] = condition_product[1][product[1][number]] + extra_value
			compare(1, product[1][number])
			condition_product_list[product[1][number]] = condition_product_list[product[1][number]] - extra_value
		end
	end
end

function compare(current, text)
	if (not condition_buy_product[current] or condition_buy_product[current] > condition_product_list[text]) and is_product_active[text] then
		condition_buy_product[current] = condition_product_list[text]
		buy_product[current] = text
	end
end

function open_warehouse(number)
	current_warehouse = number
	allow = allow + 5
	sampSendChat("/company")
	sampSendDialogResponse(id_company, 1, 1)
	sampSendDialogResponse(id_company_2, 1, number-1)
	sampSendDialogResponse(id_company_2_1, 1, 1)
	sampSendDialogResponse(id_company_2_1_2, 1, 1)
	wait(3*big_delay)
end

function cmd_on()
	if not is_active then
		cmd_start()
	else
		cmd_end()
	end
end

function cmd_start ()
	is_active = true
	button_on = 'Остановить'
	printStyledString("~W~company bot ~G~ON", 1000, 4)
	is_active = true
	lua_thread.create(function ()
		allow = allow + 3
		sampSendChat("/company")
		wait(big_delay)
		sampSendDialogResponse(id_company, 1, 1)
		wait(big_delay)
		sampSendDialogResponse(id_company_2, 0)
		sampSendDialogResponse(id_company, 0)
		open_warehouses()
		while not status do wait(100) end
		wait(3*big_delay)
		allow = allow + 1
		sampSendChat("/exchange1")
		wait(10*big_delay)
		first_check = false
	end)
end

function cmd_end()
	is_active = false
	button_on = 'Запустить'
	printStyledString("~W~company bot ~R~OFF", 1000, 4)
	is_active = false
	allow = 0
end

function sampev.onSendCommand(command)
	if allow > 0 and command == '/exchange1' then
		printStyledString("~W~command: "..command, 1000, 4)
	end
end

function apply_custom_style()
	local style = imgui.GetStyle()
	local colors = style.Colors
	local clr = imgui.Col
	local ImVec4 = imgui.ImVec4
	style.WindowRounding = 10
	style.WindowTitleAlign = imgui.ImVec2(0.5, 0.5)
	style.ChildWindowRounding = 1.5
	style.FrameRounding = 1.0
	style.ItemSpacing = imgui.ImVec2(5.0, 4.0)
	style.ScrollbarSize = 13.0
	style.ScrollbarRounding = 0
	style.GrabMinSize = 8.0
	style.GrabRounding = 1.0
	-- style.Alpha =
	style.WindowPadding = imgui.ImVec2(4.0, 4.0)
	-- style.WindowMinSize =
	style.FramePadding = imgui.ImVec2(2.5, 3.5)
	-- style.ItemInnerSpacing =
	-- style.TouchExtraPadding =
	-- style.IndentSpacing =
	-- style.ColumnsMinSpacing = ?
	style.ButtonTextAlign = imgui.ImVec2(0.02, 0.4)
	-- style.DisplayWindowPadding =
	-- style.DisplaySafeAreaPadding =
	-- style.AntiAliasedLines =
	-- style.AntiAliasedShapes =
	-- style.CurveTessellationTol =
	colors[clr.Text]                   = ImVec4(1.00, 1.00, 1.00, 1.00)
	colors[clr.TextDisabled]           = ImVec4(0.50, 0.50, 0.50, 1.00)
	colors[clr.WindowBg]               = imgui.ImColor(0, 0, 0, 227):GetVec4()
	colors[clr.ChildWindowBg]          = ImVec4(1.00, 1.00, 1.00, 0.00)
	colors[clr.PopupBg]                = ImVec4(0.08, 0.08, 0.08, 0.94)
	colors[clr.ComboBg]                = colors[clr.PopupBg]
	colors[clr.Border]                 = imgui.ImColor(40, 142, 110, 90):GetVec4()
	colors[clr.BorderShadow]           = ImVec4(0.00, 0.00, 0.00, 0.00)
	colors[clr.FrameBg]                = imgui.ImColor(40, 142, 110, 113):GetVec4()
	colors[clr.FrameBgHovered]         = imgui.ImColor(40, 142, 110, 164):GetVec4()
	colors[clr.FrameBgActive]          = imgui.ImColor(40, 142, 110, 255):GetVec4()
	colors[clr.TitleBg]                = imgui.ImColor(40, 142, 110, 236):GetVec4()
	colors[clr.TitleBgActive]          = imgui.ImColor(40, 142, 110, 236):GetVec4()
	colors[clr.TitleBgCollapsed]       = ImVec4(0.05, 0.05, 0.05, 0.79)
	colors[clr.MenuBarBg]              = ImVec4(0.14, 0.14, 0.14, 1.00)
	colors[clr.ScrollbarBg]            = ImVec4(0.02, 0.02, 0.02, 0.53)
	colors[clr.ScrollbarGrab]          = imgui.ImColor(40, 142, 110, 236):GetVec4()
	colors[clr.ScrollbarGrabHovered]   = ImVec4(0.41, 0.41, 0.41, 1.00)
	colors[clr.ScrollbarGrabActive]    = ImVec4(0.51, 0.51, 0.51, 1.00)
	colors[clr.CheckMark]              = ImVec4(1.00, 1.00, 1.00, 1.00)
	colors[clr.SliderGrab]             = ImVec4(0.28, 0.28, 0.28, 1.00)
	colors[clr.SliderGrabActive]       = ImVec4(0.35, 0.35, 0.35, 1.00)
	colors[clr.Button]                 = imgui.ImColor(40, 142, 110, 255):GetVec4()
	colors[clr.ButtonHovered]          = imgui.ImColor(35, 121, 93, 174):GetVec4()
	colors[clr.ButtonActive]           = imgui.ImColor(44, 154, 119, 255):GetVec4()
	colors[clr.Header]                 = imgui.ImColor(40, 142, 110, 255):GetVec4()
	colors[clr.HeaderHovered]          = ImVec4(0.34, 0.34, 0.35, 0.89)
	colors[clr.HeaderActive]           = ImVec4(0.12, 0.12, 0.12, 0.94)
	colors[clr.Separator]              = colors[clr.Border]
	colors[clr.SeparatorHovered]       = ImVec4(0.26, 0.59, 0.98, 0.78)
	colors[clr.SeparatorActive]        = ImVec4(0.26, 0.59, 0.98, 1.00)
	colors[clr.ResizeGrip]             = imgui.ImColor(40, 142, 110, 255):GetVec4()
	colors[clr.ResizeGripHovered]      = imgui.ImColor(35, 121, 93, 174):GetVec4()
	colors[clr.ResizeGripActive]       = imgui.ImColor(44, 154, 119, 255):GetVec4()
	colors[clr.CloseButton]            = ImVec4(0.41, 0.41, 0.41, 0.50)
	colors[clr.CloseButtonHovered]     = ImVec4(0.98, 0.39, 0.36, 1.00)
	colors[clr.CloseButtonActive]      = ImVec4(0.98, 0.39, 0.36, 1.00)
	colors[clr.PlotLines]              = ImVec4(0.61, 0.61, 0.61, 1.00)
	colors[clr.PlotLinesHovered]       = ImVec4(1.00, 0.43, 0.35, 1.00)
	colors[clr.PlotHistogram]          = ImVec4(0.90, 0.70, 0.00, 1.00)
	colors[clr.PlotHistogramHovered]   = ImVec4(1.00, 0.60, 0.00, 1.00)
	colors[clr.TextSelectedBg]         = ImVec4(0.26, 0.59, 0.98, 0.35)
	colors[clr.ModalWindowDarkening]   = ImVec4(0.10, 0.10, 0.10, 0.35)
end

function imgui.TextColoredRGB(string)
    local style = imgui.GetStyle()
    local colors = style.Colors
    local clr = imgui.Col

    local function color_imvec4(color)
        if color:upper() == 'SSSSSS' then return colors[clr.Text] end
        local color = type(color) == 'number' and ('%X'):format(color):upper() or color:upper()
        local rgb = {}
        for i = 1, #color/2 do rgb[#rgb+1] = tonumber(color:sub(2*i-1, 2*i), 16) end
        return imgui.ImVec4(rgb[1]/255, rgb[2]/255, rgb[3]/255, rgb[4] and rgb[4]/255 or colors[clr.Text].w)
    end

    local function render_text(string)
        local text, color = {}, {}
        local m = 1
        while string:find('{......}') do
            local n, k = string:find('{......}')
            text[#text], text[#text+1] = string:sub(m, n-1), string:sub(k+1, #string)
            color[#color+1] = color_imvec4(string:sub(n+1, k-1))
            local t1, t2 = string:sub(1, n-1), string:sub(k+1, #string)
            string = t1..t2
            m = k-7
        end
        if text[0] then
            for i, _ in ipairs(text) do
                imgui.TextColored(color[i] or colors[clr.Text], u8(text[i]))
                imgui.SameLine(nil, 0)
            end
            imgui.NewLine()
        else imgui.Text(u8(string)) end
    end

    render_text(string)
end
